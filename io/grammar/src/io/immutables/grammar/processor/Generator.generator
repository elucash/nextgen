[template public generate]

	[let termsClass][name]Terms[/let]
	[let parserClass][name]Parser[/let]
	[let productionsClass][name]Productions[/let]
	[let treesClass][name]Trees[/let]

	[output.java pack termsClass originElement]
[generateTerms termsClass]
	[/output.java]

	[output.java pack productionsClass originElement]
[generateProductions productionsClass termsClass treesClass]
	[/output.java]

	[output.java pack treesClass originElement]
[generateTrees treesClass productionsClass]
	[/output.java]

[/template]

[template generateTerms String className]
package [pack];

@SuppressWarnings("all")
@org.immutables.value.Generated(generator = "[grmp].processor.Generator", from = "[name].grammar")
public final class [className] extends [grmp].Terms {
	[tokenConstants]

	private [className](Tokenizer tokenizer) { super(tokenizer); }

	public static [className] from(char[arr] input) {
		Tokenizer l = new Tokenizer(input);
		l.tokenize();
		return new [className](l);
	}

  private static final class Tokenizer extends [grmp].Terms.Tokenizer {
		[smallTableDispatch]
		[smallTableMatchers]
		[charMatchesMatchers]

		Tokenizer(char[arr] input) { super(input); }
		[readTokens]
		[matchTokens]
	}

	protected Traversal newTraversal(int[arr] tokens, int tokenEnd) {
		return new Traversal(tokens, tokenEnd) {
			[nextNonIgnore]
		};
	}
	[showTerm]
	[kindTerm]
	[classTerm]
}
[/template]

[template tokenConstants]
	[for d in dispatch.terms]
/** [d] */
public static final int TERM_[asConstant d.name] = [literal.hex for.index];
	[/for]
	[for k in dispatch.termsByKind.keySet if k ne unkinded]
/** [k] */
public static final int KIND_[asConstant k] = [literal.hex for.index];
	[/for]
public static final int UNKINDED = -1;
[/template]

[template kindTerm]

@Override
protected int kindTerm(int token) {
	switch (token) {
	[for e in dispatch.termsByKind.asMap.entrySet if e.key ne unkinded]
		[for d in e.value]
	case TERM_[asConstant d.name]: // [d]
		[/for]
		 return KIND_[asConstant e.key];
	[/for]
	default: return UNKINDED;
	}
}
[/template]

[template showTerm]

@Override
protected String showTerm(int token) {
	switch (token) {
	[for d in dispatch.terms]
	case TERM_[asConstant d.name]: return "[d.id]";
	[/for]
	case EOF: return "EOF";
	default: return "?";
	}
}
[/template]

[template classTerm]

@Override
protected int classTerm(int token) {
	switch (token) {
	[for d in dispatch.terms]
	case TERM_[asConstant d.name]: return CLASS_[if d.id.placeholder]PLACEHOLDER[else]VERBATIM[/if];
	[/for]
	default: return CLASS_SYNTHETIC;
	}
}
[/template]

[template nextNonIgnore]

public int advance() {
	int t = next();
	[for ddd in dispatch.terms if ddd.ignored][if for.first]
	while ([for d in dispatch.terms if d.ignored][if not for.first] | [/if]t == TERM_[asConstant d.name][/for]) {
		t = next();
	}
	[/if][/for]
	return t;
}
[/template]

[template smallTableDispatch]
private static final int[arr] FIRST_SIMPLE = {[for s in dispatch.simple][if not for.first],[/if][if mod16 for.index]
		[else] [/if][s.group.index][/for]
};
[/template]

[template smallTableMatcher Term d Match m String suffix]
// [d.id] [m]
private static final byte[arr] [asConstant d.name][suffix] = {[for b in m.smallTable.table][if not for.first],[/if][if mod16 for.index]
		[else] [/if][if b]1[else]0[/if][/for]
};
[/template]

[template smallTableMatchers]
	[for d in dispatch.terms]
		[for m in d.rest]
			[if m.match.smallTable]
[smallTableMatcher d m.match ('_' m.index)]
			[/if]
		[/for]
		[if d.not.present]
			[if d.not.get.smallTable]
[smallTableMatcher d d.not.get '_G']
			[/if]
		[else if d.and.present]
			[if d.and.get.smallTable]
[smallTableMatcher d d.and.get '_G']
			[/if]
		[/if]
	[/for]
[/template]

[template charMatchesMatcher Term d Match m String suffix]
// [d.id] [m]
[let cm]com.google.common.base.CharMatcher[/let]
private static final [cm] [asConstant d.name][suffix] = [cm].none()
	[for range in m.charMatches.defined.asRanges]
		.or([cm].inRange('[range.lowerEndpoint]', '[range.upperEndpoint]')[if m.charMatches.not].negate()[/if])
	[/for]
		.precomputed();
[/template]

[template charMatchesMatchers]
	[for d in dispatch.terms]
		[for m in d.parts]
			[if m.match.charMatches]
[charMatchesMatcher d m.match ('_' m.index)]
			[/if]
		[/for]
		[if d.not.present]
			[if d.not.get.charMatches]
[charMatchesMatcher d d.not.get '_G']
			[/if]
		[else if d.and.present]
			[if d.and.get.charMatches]
[charMatchesMatcher d d.and.get '_G']
			[/if]
		[/if]
	[/for]
[/template]

[template matchTokens]
	[for d in dispatch.terms]
// [d]
private int read_[asVar d.name](char c, int p) {
	[if d.firstSimpleAlways]
	c = nextChar();
	[/if]
	[for r in d.rest]
	// [r]
		[if r.match.sequence]
			[for codepoint in r.match.sequence.points]
	if (c != '[codepoint]') return position = p; c = nextChar();
			[/for]
		[else]
	[if r.cardinality.atLeastOne]
	if (!([codepointMatch d.name r.match ('_' r.index)])) return position = p; c = nextChar();
	[else if r.cardinality.atMostOne]
	if ([codepointMatch d.name r.match ('_' r.index)]) c = nextChar();
	[/if]
	[if r.cardinality.multiple]
	while ([codepointMatch d.name r.match ('_' r.index)]) c = nextChar();
	[/if]
		[/if]
	[/for]
	[if d.not.present]
	if ([codepointMatch d.name d.not.get '_G']) return position = p;
	[else if d.and.present]
	if (!([codepointMatch d.name d.and.get '_G'])) return position = p;
	[/if]
	return position;
}
	[/for]
[/template]

[template codepointMatch String name Match m String suffix][output.trim]
[if m.equal] c == '[m.equal.point]'
[else if m.notEqual] c != '[m.notEqual.point]'
[else if m.inRange] '[m.inRange.lower]' <= c & c <= '[m.inRange.upper]'
[else if m.notInRange] c < '[m.notInRange.lower]' & '[m.notInRange.upper]' > c
[else if m.smallTable] c < 128 & [asConstant name][suffix][acc]c[/acc] == 1
[else if m.charMatches] [asConstant name][suffix].matches(c)
[else if m.sequence] c == '[m.sequence.asFirst.point]'
[/if]
[/output.trim][/template]

[template readTokens]

@Override
protected int read(char c) {
	int p = this.position;
	if (c < 128) {
		switch(FIRST_SIMPLE[acc]c[/acc]) {
	[for g in dispatch.simpleGroups]
		case [g.index]:
		[for d in g.terms]
			if (p != read_[asVar d.name](c, p)) return commit(TERM_[asConstant d.name]);
		[/for]
			break;
	[/for]
		default:
			nextChar();
			return commit(UNEXPECTED);
		}
	}
	[for d in dispatch.complexGroup.terms]
	if (p != read_[asVar d.name](c, p)) return commit(TERM_[asConstant d.name]);
	[/for]
	nextChar();
	return commit(UNEXPECTED);
}
[/template]

[template generateProductions String className String termsClass String treesClass]
package [pack];

import static [pack].[termsClass].*;

@SuppressWarnings("all")
@org.immutables.value.Generated(generator = "[grmp].processor.Generator", from = "[name].grammar")
public final class [className]<T extends [grmp].TreeProduction<[treesClass]>> extends [grmp].Productions<[treesClass], T> {
	[for p in productions if not (p.ephemeral or p.subtypes)]
	/** Production {@code [p.id]}. */
	public static final short KIND_[asConstant p.id] = ~[for.index];
	[/for]
	[for t in uniqueParts]
	/** Part code {@code [t]}. */
	public static final short PART_[asConstant t] = 1 + [for.index];
	[/for]

	private [className]([termsClass] terms, Parser parser, TreeConstructor<T> constructor) {
		super(terms, parser, constructor);
	}
	[for p in productions if not p.ephemeral, String t = asType p.id, String v = asVar p.id]

	public static [className]<[treesClass].[t]> [v]([termsClass] terms) {
		Parser parser = new Parser(terms);
		parser.[v](ANY_PART);
		return new [className]<[treesClass].[t]>(terms, parser, [className]::[v]);
	}
	[/for]

	private static final class Parser extends [grmp].Productions.Parser {
		private final [termsClass] input;

		Parser([termsClass] input) {
			super(input);
			this.input = input;
		}
		[for p in productions, String v = asVar p.id]

		boolean [v](short part) {
		[if p.subtypes]
			return [for s in p.subtypes][if not for.first]
					|| [/if][asVar s](part)[/for];
		[else if p.literalAlternatives]
			[literalAlternativesBody p]
		[else]
			int i = terms.index(), p = position;
			[for a in p.alternatives]
			[if not p.ephemeral]
			production(part, KIND_[asConstant p.id]);
			[/if]
				[let altVar]l[for.index][/let]
				[if p.alwaysSucceedingAlternatives.empty]
			[altVar]: {
				[alternativeBody p a altVar]
				return [if p.ephemeral]true[else]end(part, p)[/if];
			}
			terms.reset(i); position = p;
				[else]
			[alternativeBody p a altVar]
			return [if p.ephemeral]true[else]end(part, p)[/if];
				[/if]
			[/for]
			[if p.alwaysSucceedingAlternatives.empty]
			return false;
			[/if]
		[/if]
		}
		[/for]
	}

	@Override
	public String showKind(short kind) {
		if (kind >= 0) return showTerm(kind);
		switch (kind) {
		[for p in productions if not (p.ephemeral or p.subtypes)]
		case KIND_[asConstant p.id]: return [literal.string p.id];
		[/for]
		default: return "?";
		}
	}

	@Override
	public String showPart(short part) {
		switch (part) {
		[for t in uniqueParts]
		case PART_[asConstant t]: return [literal.string t];
		[/for]
		default: return "?";
		}
	}
	[generateConstructTrees treesClass]
}
[/template]

[template literalAlternativesBody Prod prod]
int i = terms.index(), p = position;
[if not prod.ephemeral]
production(part, KIND_[asConstant prod.id]);
[/if]
int t = terms.advance();
switch (t) {
[for l in prod.literalAlternatives]
case TERM_[asTokenConstant l]:
[/for]
	match([if prod.hasTagged]part != NO_PART ? [for tg in prod.parts][if for.first]PART_[asConstant tg.tag][/if][/for] : [/if]NO_PART, t);
	return [if prod.ephemeral]true[else]end(part, p)[/if];
default:
	[-- Just use first in alternatives do describe mismatch --]
	mismatch([for l in prod.literalAlternatives][if for.first]TERM_[asTokenConstant l][/if][/for], t);
	terms.reset(i); position = p;
	return false;
}
[/template]

[template alternativeBody Prod prod Alt alt String altVar]
[for part in alt.parts if not part.mode.consume][if for.first]
int j;
[/if][/for]
	[for part in alt.parts, Part p = asPartCase part]
		[if p.not]
j = terms.index();
if ([inlineMatch p for.index]) break [altVar];
terms.reset(j);
		[else if p.and]
j = terms.index();
if (![inlineMatch p for.index]) break [altVar];
terms.reset(j);
		[else]
[if p.cardinality.maybeOne]
[inlineMatch p for.index];[-- single optional --]
[/if]
[-- Here we do loop peeling: We're separating first required match from
    the rest multiple optional occurenses, so 1..* becomes 1 and 0..* --]
[if p.cardinality.atLeastOne]
if (![inlineMatch p for.index]) break [altVar];[-- single required --]
[/if]
[if p.cardinality.multiple]
while ([inlineMatch p for.index]);[-- multiple optional --]
[/if]
		[/if]
	[/for]
[/template]

[template inlineMatch Part p Integer partIndex][output.trim]
	[if p.literal]
term([if p.tagged]part != NO_PART ? PART_[asConstant p.tag] : [/if]NO_PART, TERM_[asTokenConstant p.literal])
	[else if p.reference]
		[if p.reference.ephemeral]
[asVar p.reference.id](part != NO_PART ? ANY_PART : NO_PART)
		[else if p.tagged]
[asVar p.reference.id](part != NO_PART ? PART_[asConstant p.tag] : NO_PART)
		[else]
[asVar p.reference.id](NO_PART)
		[/if]
	[/if]
[/output.trim][/template]

[-- we don't add it as import because don't want clashes with node names --]
[template grmp]io.immutables.grammar[/template]

[template generateConstructTrees String treesClass]
[for p in productions if not p.ephemeral,
	String type = asType p.id, String var = asVar p.id]
	[if p.terminalSubtypes]

private static [treesClass].[type] [var](Traversal in) {
	switch (in.kind()) {
		[for s in p.terminalSubtypes]
	case KIND_[asConstant s]: return [asVar s](in);
		[/for]
	default: throw io.immutables.Unreachable.exhaustive();
	}
}
	[else]

private static [treesClass].[type] [var](Traversal in) {
	assert in.current() == Traversal.At.PRODUCTION_BEGIN;
	assert in.kind() == KIND_[asConstant p.id];

	[treesClass].[type].Builder builder =
			new [treesClass].[type].Builder()
					.termBegin(in.termBegin())
					.termEnd(in.termEnd())
					.productionIndex(in.index());

	while (in.next() != Traversal.At.PRODUCTION_END)[if not p.parts];[else] {
		switch (in.part()) {
	[for t in p.parts, String n = asVar t.tag, String c = asConstant t.tag]
		case PART_[c]:
		[if t.symbol]
			builder.[n](in.term());
		[else]
			builder.[n]([asVar t.reference.get](in));
		[/if]
			break;
	[/for]
		default: throw io.immutables.Unreachable.contractual();
		}
	}[/if]

	return builder.build();
}
	[/if]
[/for]
[/template]

[template generateTrees String className String productionsClass]
package [pack];

@[grmp].Node
@org.immutables.value.Value.Enclosing
@org.immutables.trees.Trees.Visit
@org.immutables.trees.Trees.Transform
@SuppressWarnings("all")
@org.immutables.value.Generated(generator = "[grmp].processor.Generator", from = "[name].grammar")
public interface [className] {
	[for p in productions if not p.ephemeral, String type = asType p.id]
	[if p.subtypes]
	interface [type] extends [grmp].TreeProduction<[className]>[for s in p.supertypes], [asType s][/for] {
		[taggedPartsAttributes p]
	}
	[else]
	@[grmp].Node
	@org.immutables.value.Value.Immutable
	interface [type] extends [className]Nodes.With[type], [grmp].TreeProduction<[className]>[for s in p.supertypes], [asType s][/for] {
		[taggedPartsAttributes p]
		@Override default int productionKind() { return [productionsClass].KIND_[asConstant p.id]; }

		class Builder extends [className]Nodes.[type].Builder implements [grmp].TreeProduction.Builder {}
	}
	[/if]
	[/for]
	[generateMatcher className productionsClass]
	[generateVisitor className productionsClass]
}
[/template]

[template taggedPartsAttributes Prod p]
[for t in p.parts, String n = asVar t.tag]
[let partTypeName][output.trim]
	[if t.symbol]
		[grmp].Symbol
	[else]
		[asType t.reference.get]
	[/if]
[/output.trim][/let]
	[if t.cardinality.exactlyOne]
[partTypeName] [n]();
	[else if t.cardinality.atMostOne]
java.util.Optional<[partTypeName]> [n]();
	[else]
io.immutables.collect.Vect<[partTypeName]> [n]();
	[/if]
[/for]
[/template]

[template taggedPartsInitAttributes Prod p]
[for t in p.parts, String n = asVar t.tag]
	[if t.symbol]
[grmp].TreeProduction.Builder [n]([grmp].Symbol [n]);
	[else]
[grmp].TreeProduction.Builder [n]([asType t.reference.get] [n]);
	[/if]
[/for]
[/template]

[template generateMatcher String className String productionsClass]

static abstract class Matcher<IN, OUT> {

	public final OUT match([grmp].TreeProduction<[className]> v, IN in) {
		switch (v.productionKind()) {
	[for p in productions if not (p.ephemeral or p.subtypes), String type = asType p.id]
		case [productionsClass].KIND_[asConstant p.id]: return case[type](([type]) v, in);
	[/for]
		default: return fallback(v, in);
		}
	}

	protected OUT fallback([grmp].TreeProduction<[className]> v, IN in) {
		throw new UnsupportedOperationException("No fallback for " + v.getClass().getSimpleName());
	}
	[for p in productions if not p.ephemeral, String type = asType p.id]
	[if p.subtypes]

	protected final OUT case[type]([type] v, IN in) {
		return match(v, in);[-- just use default table, trust the type system --]
	}
	[else]

	public OUT case[type]([type] v, IN in) {
		return fallback(v, in);
	}
	[/if]
	[/for]
}
[/template]

[template generateVisitor String className String productionsClass]
[-- Do we need to disambiguate if production class/interface have
    literally the same 'Visitor' or 'Transformer' name --]

static abstract class Visitor extends [className]Visitor {}

static abstract class Transformer extends [className]Transformer {}
[/template]

[template arr]['[]'][/template]
[template acc String index]['['][index][']'][/template]
