-- Keywords should not be followed by a word identifier without delimiter
keyword:
  'type' ~ 'type' ! [a-zA-Z0-9]
  'concept' ~ 'concept' ! [a-zA-Z0-9]
  'impl' ~ 'impl' ! [a-zA-Z0-9]
  'return' ~ 'return' ! [a-zA-Z0-9]
  'if' ~ 'if' ! [a-zA-Z0-9]
  'else' ~ 'else' ! [a-zA-Z0-9]
  'for' ~ 'for' ! [a-zA-Z0-9]
  'case' ~ 'case' ! [a-zA-Z0-9]

keyword-types:
  'int' ~ 'int' ! [a-zA-Z0-9]
  'bool' ~ 'bool' ! [a-zA-Z0-9]
  'float' ~ 'float' ! [a-zA-Z0-9]

keyword-values:
  'true' ~ 'true' ! [a-zA-Z0-9]
  'false' ~ 'false' ! [a-zA-Z0-9]

other:
  <string> ~ ["][^"]*["]
  <decimal> ~ [0-9]+
  <hexadecimal> ~ [#][0-9a-fA-F]+
  -- FIXME if there's no newline at the end of file
  -- lexer breaks, need handle
  <comment-newline> ~ [/][/][^\n]*[\n]
  <newline> ~ [\n]

-- Only forcing the priority order for compound operators
delimiters:
  '::' ~ '::'
  '??' ~ '??'
  '||' ~ '||'
  '&&' ~ '&&'
  '^^' ~ '^^'
  ':=' ~ ':='
  '==' ~ '=='
  '!=' ~ '!='
  '++' ~ '++'
  '+=' ~ '+='
  '-=' ~ '-='
  '*=' ~ '*='
  '/=' ~ '/='
  '%=' ~ '%='
  '--' ~ '--'
  '->' ~ '->'
  '<-' ~ '<-'
  '-' ~ '-'
  '<=' ~ '<='
  '>=' ~ '>='
  '>..' ~ '>..'
  '..<' ~ '..<'
  '...' ~ '...'
  '..' ~ '..'
  '.' ~ '.'
  ':' ~ ':'
  '=' ~ '='
  '+' ~ '+'
  '/' ~ '/'
  '<' ~ '<'
  '>' ~ '>'
  '?' ~ '?'
  '%' ~ '%'
  '*' ~ '*'
  '?' ~ '?'
  '!' ~ '!'
  '|' ~ '|'
  '&' ~ '&'

identifier:
  <name> ~ [a-z][a-zA-Z0-9]*
  <typename> ~ [A-Z][a-zA-Z0-9]*

-- lists terms which are skipped by parser
ignored:
  <spacing> ~ [\s\r\t]+


unit
  elements:unit-element+

unit-element
  | empty
  | type-declaration
  | concept-declaration
  | local-binding
  | feature-named

empty
  nl

(nl)
  | comment:<comment-newline>
  | <newline>

type-declaration
  'type' name:<typename> type-parameters? constructor:constructor? type-constraints* features:features? nl?

constructor
  | constructor-parameter
  | constructor-cases

constructor-parameter
  input:parameter

constructor-cases
  '{' cases:constructor-case* nl* '}'

constructor-case
  nl* name:<typename> constructor:parameter? features:features?

concept-declaration
  'concept' name:<typename> type-parameters? type-constraints* features:features nl?

(type-parameters)
  '<' type-parameter:<typename> (',' type-parameter:<typename>)* '>'

parameter
  | parameter-product
  | parameter-record

parameter-product
  | '(' nl* ')'
  | '(' fields:named-parameters (field-separator fields:named-parameters)* field-separator? ')'

parameter-record
  | '{' nl* '}'
  | '{' fields:named-parameters-bind (field-separator fields:named-parameters-bind)* field-separator? '}'

(field-separator)
  | ',' nl?
  | nl

-- a, b Number
named-parameters
  nl* name:<name> (',' name:<name>)* type:type-reference

-- a, b Bool: true
named-parameters-bind
  nl* name:<name> (',' name:<name>)* type:type-reference (':' expression)?

type-reference
  | type-reference-variant
  | type-reference-invariant

-- A | B | C
type-reference-variant
  alternative:type-reference-invariant (nl? '|' nl? alternative:type-reference-invariant)+

-- (Aa, Bb)
type-reference-product
  | '(' nl* ')'
  | '(' component:type-reference (field-separator component: type-reference)* field-separator? ')'

-- {x, y, z int, comment String}
-- { } make illegal?
type-reference-record
  | '{' nl* '}'
  | '{' fields:named-parameters (field-separator fields:named-parameters)* field-separator? '}'

type-reference-array
  '[' component:type-reference ']'

-- a~
-- a?
-- Aridna...
type-reference-invariant
  | type-reference-sequence
  | type-reference-optional
  | type-reference-slot
  | type-reference-undecorated

-- (A,B)
-- {x, y Int}
-- [Elem]
-- A<B>
type-reference-undecorated
  | type-reference-product
  | type-reference-record
  | type-reference-array
  | type-reference-declared

-- Elem...
type-reference-sequence
  component:type-reference-undecorated '...'

type-reference-optional
  component:type-reference-undecorated '?'

type-reference-slot
  component:type-reference-undecorated '~'

-- String
-- Box<Nail>
type-reference-declared
  name:<typename> type-arguments?

-- <A, B, C>
(type-arguments)
  '<' argument:type-reference (',' argument:type-reference)* '>'

-- :: A == B, C<D>
(type-constraints)
   nl? '::' constraint:type-constraint (',' constraint:type-constraint)*

type-constraint
  | type-constraint-equivalence
  | type-constraint-conception

-- T == Box<Y>
type-constraint-equivalence
  left:type-reference '==' right:type-reference

-- Eq<A>
type-constraint-conception
  concept:type-reference-declared

features
  | '{' nl* '}'
  | '{' element:features-element (nl element:features-element)* nl? '}'

features-element
  | features-element-local
  | feature-named
  | feature-operator-prefix
  | feature-operator-infix
  | feature-operator-postfix

features-element-local
  nl* binding:local-binding

local-binding
  | let-binding
  | slot-binding

feature-operator-prefix
  nl* operator-prefix right:operand-parameter output:return-type? type-constraints* impl:statements?

feature-operator-infix
  nl* left:operand-parameter operator-infix right:operand-parameter output:return-type? type-constraints* impl:statements?

feature-operator-postfix
  nl* left:operand-parameter operator-postfix output:return-type? type-constraints* impl:statements?

operand-parameter
  | parameter
  | type-reference-product

feature-named
  nl* name:<name> type-parameters? input:parameter? output:return-type? type-constraints* impl:statements?

return-type
  !'{' component:type-reference (',' component:type-reference)*

statements
  '{' statement:statements-element* nl? '}'

let-binding
  to:name-binding '=' from:expressions

-- type should be valid
slot-binding
  to:name-binding type:type-reference-slot ':=' init:expression

name-binding
  component:<name> (',' component:<name>)*

expressions
  component:expression (',' component:expression)*

statements-element
  | empty
  | local-binding
  | statement-expression
  | expression-effect
  | expression

expression-or-statement
  | expression
  | statement-expression

statement-expression
  | statement-return
  | statement-if
  | statement-for

statement-for
  'for' (to:name-binding '<-')? from:expression (nl? 'if' condition:expression)? yield:statements

statement-return
  'return' value:expression-or-statement?

statement-if
  | statement-if-guard
  | statement-if-else

statement-if-guard
  | 'if' condition:if-condition 'else' otherwise:statement-return
  | 'if' condition:if-condition then:statement-return

statement-if-else
  'if' condition:if-condition then:statements (nl? 'else' nl? otherwise:statement-else-if)

statement-else-if
  | statement-if-else
  | statement-else

statement-else
  otherwise:statements?

if-condition
  | expression
  | condition-pattern

condition-pattern
  to:pattern-binding '=' from:expressions

pattern-binding
  | name-binding

expression
  | expression-logical-sub

expression-logical-sub
  | expression-logical
  | expression-relational-sub

expression-logical
  left:expression-relational-sub (nl? operator-infix-logical nl? right:expression-relational-sub)+

expression-relational-sub
  | expression-relational
  | expression-additive-sub

expression-relational
  left:expression-additive-sub nl? operator-infix-relational nl? right:expression-additive-sub

expression-additive-sub
  | expression-additive
  | expression-multiplicative-sub

expression-additive
  left:expression-multiplicative-sub (nl? operator-infix-additive nl? right:expression-multiplicative-sub)+

expression-multiplicative-sub
  | expression-multiplicative
  | expression-ranging

expression-multiplicative
  left:expression-ranging (nl? operator-infix-multiplicative nl? right:expression-ranging)+

expression-ranging
  left:expression-unary (operator-infix-ranging right:expression-unary)?

expression-unary
  operator-prefix? right:expression-access

expression-access
  base:expression-literal (nl? '.' nl? feature:feature-application)*

expression-effect
  | expression-effect-mutative
  | expression-effect-assigning

expression-effect-mutative
  left:expression operator-postfix-mutative

expression-effect-assigning
  left:expression operator-infix-assigning right:expression

feature-application
  name:<name> argument:argument?

argument
  | literal-product
  | literal-record
  | literal-sequence

expression-literal
  | literal-reference
  | literal-product
  | literal-sequence
  | literal-constructor
  | literal-bool
  | literal-string
  | literal-number-decimal
  | literal-number-hexadecimal

literal-constructor
  type:<typename> argument:argument?

literal-product
  | '(' nl* ')'
  | '(' component:component-expression (field-separator component:component-expression)* field-separator? ')'

literal-record
  | '{' nl* '}'
  | '{' field:field-expression (field-separator field:field-expression)* field-separator? '}'

literal-sequence
  | '[' nl* ']'
  | '[' component:component-expression (field-separator component:component-expression)* field-separator? ']'

field-expression
  nl* name:<name> ':' nl* value:expression-or-statement

component-expression
  nl* value:expression-or-statement

literal-reference
  name:<name>

literal-string
  literal:<string>

literal-number-decimal
  literal:<decimal>

literal-number-hexadecimal
  literal:<hexadecimal>

literal-bool
  | literal:'true'
  | literal:'false'

(operator-prefix)
  | operator:'-'
  | operator:'!'

(operator-postfix)
  | operator-postfix-mutative

(operator-postfix-mutative)
  | operator:'--'
  | operator:'++'

(operator-infix)
  | operator-infix-additive
  | operator-infix-multiplicative
  | operator-infix-relational
  | operator-infix-logical
  | operator-infix-assigning

(operator-infix-multiplicative)
  | operator:'/'
  | operator:'*'
  | operator:'%'

(operator-infix-ranging)
  | operator:'>..'
  | operator:'..<'
  | operator:'..'

(operator-infix-additive)
  | operator:'+'
  | operator:'-'

(operator-infix-relational)
  | operator:'<'
  | operator:'<='
  | operator:'>'
  | operator:'>='
  | operator:'=='
  | operator:'!='

(operator-infix-assigning)
  | operator:':='
  | operator:'+='
  | operator:'-='
  | operator:'*='
  | operator:'/='
  | operator:'%='

(operator-infix-logical)
  | operator:'&&'
  | operator:'||'
  | operator:'^^'
