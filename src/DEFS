
lib_test = [
  '//lib:junit',
  '//src/io/immutables/that:that'
]

lib_default = [
  '//lib:guava',
  '//lib:jsr305',
  '//lib:immutables_annotations',
  '//src/io/immutables:package',
]

processor_default = [
  'org.immutables.value.internal.$processor$.$Processor',
]

processor_lib_default = [
  '//lib:immutables',
  '//lib:immutables_trees',
  '//lib:guava',
  '//src:metainf_extensions'
]

def java_package(name, srcs = [], test_src = [], deps = [], res = [], test_deps = [], processor_deps = [], processors = []):
  java_library(
    name = name,
    srcs = glob(['*.java'], excludes = ['Test*.java']) if not srcs else srcs,
    resources = res, # glob(['*'], excludes = ['*.java', '*.class', 'BUCK']),
    deps = dedupe(deps + lib_default),
    annotation_processors = dedupe(processor_default + processors),
    annotation_processor_deps = dedupe(processor_lib_default + processor_deps),
    visibility = ['//...']
  )
  if glob(['Test*.java']):
    java_test(
      name = name + '_test',
      srcs = glob(['Test*.java']) if not test_src else test_src,
      deps = dedupe(deps + lib_default + lib_test + [':' + name] + test_deps),
      resources = glob(['*.java']),
      vm_args = ['-ea', '-Dio.immutables.that.replace-error-message= ']
    )

def dedupe(seq):
  seen = set()
  seen_add = seen.add
  return [x for x in seq if not (x in seen or seen_add(x))]
